syntax = "proto3";

package shortlr.v1;

option go_package = "github.com/ifaisalalam/shortlr-proto/shortlr/proto/v1;shortlrv1";

import "google/api/annotations.proto";
import "google/api/field_behaviour.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0"
  }
  external_docs: {
    url: "https://github.com/ifaisalalam/shortlr-proto"
    description: "protobuf definitions for Shortlr"
  }
  schemes: HTTP
  schemes: HTTPS
  security_definitions: {
    security: {
      key: "basicAuth"
      value: {
        type: TYPE_BASIC
      }
    }
  }
  security: {
    security_requirement: {
      key: "basicAuth",
    }
  }
};

message StatusCheckResponse {
  // ServingStatus denotes the status of the service.
  enum ServingStatus {
    SERVING_STATUS_INVALID = 0;
    SERVING_STATUS_UNKNOWN = 1;
    SERVING_STATUS_SERVING = 2;
    SERVING_STATUS_NOT_SERVING = 3;
  }
  ServingStatus serving_status = 1;
}

// StatusCheckAPI defines the liveness and readiness check service.
service StatusCheckAPI {
  rpc ReadinessCheck(google.protobuf.Empty) returns (StatusCheckResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /v1/readiness
      get: "/v1/readiness"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Do a readiness check"
      description: "Checks responsiveness of all the dependant resources that the service is using"
      tags: "StatusCheck"
      security: {}
    };
  }

  rpc LivenessCheck(google.protobuf.Empty) returns (StatusCheckResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /v1/liveness
      get: "/v1/liveness"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Do a liveness check"
      description: "Checks only for the responsiveness of the service"
      tags: "StatusCheck"
      security: {}
    };
  }
}

service UrlShortener {
  rpc CreateShortUrl(ShortUrlRequest) returns (ShortUrlResponse) {
    option (google.api.http) = {
      post: "/v1/url-shortener/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create new short URL"
      description: "Creates a new short URL for the provided long URL."
      tags: "CreateShortUrl"
    };
  }

  rpc GetTargetByUid(GetTargetRequest) returns (GetTargetResponse) {
    option (google.api.http) = {
      get: "/v1/url-shortener/target/{target_uid}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Returns the target URL given the UID"
      description: "Returns the target URL associated with the given UID."
      tags: "GetTargetByUid"
    };
  }
}

message ShortUrlRequest {
  string url = 1
  [(google.api.field_behavior) = REQUIRED];
}

message ShortUrlResponse {
  string url = 1;
  string short_url = 2;
  string uid = 3;
}

message GetTargetRequest {
  string uid = 1
  [(google.api.field_behavior) = REQUIRED];
}

message GetTargetResponse {
  string url = 1;
}
